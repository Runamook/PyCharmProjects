#!/usr/bin/env python3

import serial
import argparse
import time
import functools
import operator
import os
import datetime
from time import sleep
import re
from serial.serialutil import SerialException
import pytz

try:
    from .emhmeter import MeterBase, create_input_vars, logger
except ModuleNotFoundError:
    from emhmeter import MeterBase, create_input_vars, logger


"""
Set clock time to 10:23:50:

sent:         /?!<CR><LF>
received:     /EMH5\@01LZQJL0014E <CR><LF>
sent:         <ACK>051<CR><LF>
received:     <SOH>P0<STX>()<ETX><BCC>
sent:         <SOH>W5<STX>0.9.1(0102350)(00000000)<ETX><BCC>
received:     <ACK>
sent:         <SOH>B0<ETX><BCC>
/// Это вроде работает

Set date to 17.06.03:

sent:          /?!<CR><LF>
received:      /EMH5\@01LZQJC0014E <CR><LF>
sent:          <ACK>051<CR><LF>
received:      <SOH>P0<STX>()<ETX><BCC>
sent:          <SOH>W5<STX>0.9.2(1030617)(00000000)<ETX><BCC>
received:      <ACK>
sent:          <SOH>B0<ETX><BCC>

"""


def set(cmd, data, input_vars):
    with MeterBase(input_vars) as m:
        m.sendcmd_and_decode_response(MeterBase.ACK + b'051\r\n')
        result = m.sendcmd_and_decode_response(cmd.encode(), data.encode())
        cmd = MeterBase.SOH + b'B0' + MeterBase.ETX
        m.sendcmd_and_decode_response(cmd + MeterBase.bcc(cmd))
        return result


def make_pause():
    pause = 25
    logger.debug(f"Pausing for {pause} seconds")
    sleep(pause)
    """
    i = 0
    while i < pause:
        print(".", end=" ")3
        i += 1
        sleep(1)
    print()
    """
    return


def set_dt(input_vars):
    make_pause()
    # dt = datetime.datetime.utcnow() - datetime.timedelta(days=7)
    dt = datetime.datetime.utcnow()
    date = dt.strftime("2" + "%y%m%d")
    time = dt.strftime("2" + "%H%M%S")
    logger.info(f"Setting dt to {date}, {time}")
    # Set time
    logger.debug(f"===================== Setting time ===================== ")
    set("W5", f"0.9.1({time})(00000000)", input_vars)
    make_pause()
    # Set date
    logger.debug(f"===================== Setting date ===================== ")
    set("W5", f"0.9.2({date})(00000000)", input_vars)


def get(what, input_vars, results):
    # results = dict()
    # Get time
    if what == "time":
        obis = "0.9.1"
        name = "time"
    elif what == "date":
        obis = "0.9.2"
        name = "date"
    else:
        logger.error(f"Incorrect input {what}, use \"time\" or \"date\"")
        raise KeyError

    results[name] = [datetime.datetime.utcnow(), None]
    logger.debug(f"===================== Getting {name} ===================== ")
    value = set("R5", f"{obis}()", input_vars=input_vars)
    results[name][1] = value
    logger.debug(f"{results}")
    make_pause()
    if obis not in value:
        logger.error(f"Unable to receive {name}. Received: \"{value}\"")
        raise ValueError
    return results


def check(what, value):

    # 0.9.2(1190724), 0.9.1(1221856)
    re_in_parenthesis = re.compile('^0.9..[(](.+?)[)]')
    logger.debug(f"Checking meter {what} \"{value}\"")

    reference_value = value[0]
    checked_value = value[1]

    found_value = re_in_parenthesis.search(checked_value).groups()[0]

    if what == "date":
        return check_date(reference_value, found_value)
    elif what == "time":
        return check_time(reference_value, found_value)


def check_date(ref_value, checked_value):
    # datetime object, string
    ref_value = ref_value.strftime("%y%m%d")
    checked_value = checked_value[1:]
    logger.debug(f"Checking {ref_value} == {checked_value}")
    return ref_value == checked_value


def check_time_tz(ref_value, checked_value):
    # datetime object, string

    # Select meter TZ based on response
    if checked_value[0] == "1":
        local_tz = pytz.timezone("Europe/Berlin")                           # UTC +2
    elif checked_value[0] == "2":
        local_tz = pytz.timezone("UTC")
    else:
        local_tz = pytz.timezone("Europe/Moscow")                           # UTC +3

    # Generate "now" time in meter TZ
    utc_now = pytz.utc.localize(datetime.datetime.utcnow())
    local_now = utc_now.astimezone(local_tz)

    # Adjust ref_value time to meter TZ
    ref_value = pytz.utc.localize(ref_value)
    local_ref = ref_value.astimezone(local_tz)

    now_date = local_now.strftime("%y%m%d")

    # Take meter TZ now date (generated by script), add to meter TZ now time (received from meter)
    checked_value = datetime.datetime.strptime(now_date + checked_value[1:], "%y%m%d%H%M%S")
    logger.debug(f"Checking {local_ref} == {checked_value}")

    # Compare
    delta = (checked_value - local_ref).total_seconds()
    logger.debug(f"Delta = {delta}")

    allowable_delta = 6                  # Seconds
    return abs(delta) <= allowable_delta


def check_time(ref_value, checked_value):
    # datetime object, string

    # Select meter TZ based on response
    if checked_value[0] == "1":
        local_tz = pytz.timezone("Europe/Berlin")                           # UTC +2
    elif checked_value[0] == "2":
        local_tz = pytz.timezone("UTC")
    else:
        local_tz = pytz.timezone("Europe/Moscow")                           # UTC +3

    utc_tz = pytz.timezone("UTC")
    # Generate "now" time in UTC
    utc_now = pytz.utc.localize(datetime.datetime.utcnow())

    # ref_value is UTC already, insert TZ info into object
    ref_value = pytz.utc.localize(ref_value)
    # Adjust it to actual meter TZ
    ref_value = ref_value.astimezone(local_tz)

    now_date = utc_now.strftime("%y%m%d")

    # Take meter TZ now date (generated by script), add to meter TZ now time (received from meter)
    checked_value = datetime.datetime.strptime(now_date + checked_value[1:], "%y%m%d%H%M%S")
    # Insert local_tz into datetime object
    checked_value = local_tz.localize(checked_value)

    # Now both objects are in local TZ
    logger.debug(f"Checking {ref_value} == {checked_value}")

    # Compare
    delta = (checked_value - ref_value).total_seconds()
    logger.debug(f"Delta = {delta}")

    allowable_delta = 6                  # Seconds
    return abs(delta) <= allowable_delta


def meta(input_vars):
    results = dict()
    results = get("time", input_vars, results)
    results = get("date", input_vars, results)

    for key in results.keys():
        if check(key, results[key]):
            logger.debug(f"{key} is correct")
        else:
            logger.debug(f"{key} is incorrect")


myname = os.path.basename(__file__)

description = """
Sends a single command to the EMH LZQJ-XC meter and prints the decoded response
"""

examples = """
Examples:

    # Read the date from the meter
    python3 {0} socket://10.124.2.120:8000 R5 "0.9.2()"

    # Read the clock from the meter
    python3 {0} socket://10.124.2.120:8000 R5 "0.9.1()"

    # Read the clock from the meter and see how it works
    python3 {0} --debug socket://10.124.2.120:8000 R5 "0.9.1()"

    # Read the load profile since 2019-04-30 00:00
    python3 {0} socket://10.124.2.120:8000 R5 "P.01(11904300000;)"

""".format(myname)

"""
parser = argparse.ArgumentParser(
    description=description,
    epilog=examples,
    formatter_class=argparse.RawDescriptionHelpFormatter
)

parser.add_argument('--debug', action='store_true',
                    help='Enable debugging output')
parser.add_argument('--timeout', default=None, type=float,
                    help='Data readout timeout value in seconds (default: disabled)')
parser.add_argument('device', help='Meter address in socket://host:port format')
parser.add_argument('command', help='Command to send to the meter')
parser.add_argument('data', help='Command data to send to the meter')
args = parser.parse_args()

debug = args.debug
cmd = args.command.encode()
data = args.data.encode()
"""

meter = {
        "meterNumber": "06205102",
        "Manufacturer": "",
        "ip": "10.124.2.111",
        "InstallationDate": "2018-10-10T10:00:00",
        "IsActive": True,
        "voltageRatio": 200,
        "currentRatio": 10,
        "totalFactor": 210
    }

vars = {"port": MeterBase.get_port(meter["ip"]),
                      "timestamp": MeterBase.get_dt(),
                      "data_handler": "P.01",
                      "exporter": "Zabbix",
                      "server": "192.168.33.33",
                      "meter": meter
                      }

logger.setLevel("DEBUG")
logger.debug(f"Starting")

print(f"{vars}")
meta(vars)


# New date = , new time = 0.9.1(1033552)
# UTC time worked
# New date = , new time = 0.9.1(1003935)
# Time change worked
